plugins {
    id 'com.android.application'
}
plugins {
    id 'com.google.protobuf'
}

static def releaseTime() {
    return new Date().format("yyyy.MM.dd", TimeZone.getTimeZone("UTC"))
}

android {
    signingConfigs {
        release {
            storeFile file('../keystore/release.jks')
            keyAlias 'codeexp2021app'
            keyPassword 'codeexp2021app'
            storePassword 'codeexp2021app'
        }
        debug {
            storeFile file('../keystore/debug.keystore')
        }
    }
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${variant.flavorName}-v${versionName}-${variant.buildType.name}-build${versionCode}-${releaseTime()}.apk"
                }
            }
        }
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "${variant.flavorName}-v${versionName}-${variant.buildType.name}-build${versionCode}-${releaseTime()}.apk"
                }
            }
        }
    }
    buildFeatures {
        dataBinding true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    flavorDimensions "app"
    productFlavors {
        codeexp2021app {
            versionCode 1
            versionName "1.0.0"
            dimension "app"
            applicationId = "com.example.codeexp2021app"
            manifestPlaceholders = [deviceType: "DEVICE_TYPE"]
        }
    }
}

protobuf {
    protoc {
        artifact = rootProject.ext.dependencies["protoc"]
    }
    plugins {
        javalite {
            artifact = rootProject.ext.dependencies["protoc-gen-javalite"]
        }
        grpc {
            artifact = rootProject.ext.dependencies["protoc-gen-grpc-java"]
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc {
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation rootProject.ext.dependencies["appcompat"]
    implementation rootProject.ext.dependencies["google-material"]
    implementation rootProject.ext.dependencies["constraint-layout"]
    // lifecycle
    implementation rootProject.ext.dependencies["lifecycle-extensions"]
    implementation rootProject.ext.dependencies["lifecycle-runtime"]
    implementation rootProject.ext.dependencies["lifecycle-common-java8"]
    implementation rootProject.ext.dependencies["lifecycle-reactivestreams"]
    implementation rootProject.ext.dependencies["arch-core-testing"]
    // permission
    implementation rootProject.ext.dependencies["easypermissions"]
    // fastJson
    implementation rootProject.ext.dependencies["fastJson"]
    // Java-WebSocket
    implementation rootProject.ext.dependencies["Java-WebSocket"]
    // color-picker
    implementation rootProject.ext.dependencies["color-picker"]
    // gRPC
    implementation rootProject.ext.dependencies["grpc-okhttp"]
    implementation rootProject.ext.dependencies["grpc-protobuf-lite"]
    implementation rootProject.ext.dependencies["grpc-stub"]
    implementation rootProject.ext.dependencies["javax-annotation"]
    protobuf rootProject.ext.dependencies["protobuf"]
    // OAuth2 for Google API
    implementation(rootProject.ext.dependencies["google-auth"]) {
        exclude module: 'httpclient'
    }
    // swipe-refresh-layout
    implementation rootProject.ext.dependencies["swipe-refresh-layout"]
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["test-ext"]
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
}

task copySecretKey(type: Copy) {
    def File secretKey = file "$System.env.GOOGLE_APPLICATION_CREDENTIALS"
    from secretKey.getParent()
    include secretKey.getName()
    into 'src/main/res/raw'
    rename secretKey.getName(), "credential.json"
}
preBuild.dependsOn(copySecretKey)